// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/exec/types.go

// Package exec is a generated GoMock package.
package exec

import (
	kubectl "github.com/jonyhy96/kt-connect/pkg/kt/exec/kubectl"
	ssh "github.com/jonyhy96/kt-connect/pkg/kt/exec/ssh"
	sshuttle "github.com/jonyhy96/kt-connect/pkg/kt/exec/sshuttle"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCliInterface is a mock of CliInterface interface
type MockCliInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCliInterfaceMockRecorder
}

// MockCliInterfaceMockRecorder is the mock recorder for MockCliInterface
type MockCliInterfaceMockRecorder struct {
	mock *MockCliInterface
}

// NewMockCliInterface creates a new mock instance
func NewMockCliInterface(ctrl *gomock.Controller) *MockCliInterface {
	mock := &MockCliInterface{ctrl: ctrl}
	mock.recorder = &MockCliInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCliInterface) EXPECT() *MockCliInterfaceMockRecorder {
	return m.recorder
}

// Kubectl mocks base method
func (m *MockCliInterface) Kubectl() kubectl.CliInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kubectl")
	ret0, _ := ret[0].(kubectl.CliInterface)
	return ret0
}

// Kubectl indicates an expected call of Kubectl
func (mr *MockCliInterfaceMockRecorder) Kubectl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kubectl", reflect.TypeOf((*MockCliInterface)(nil).Kubectl))
}

// SSHUttle mocks base method
func (m *MockCliInterface) SSHUttle() sshuttle.CliInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHUttle")
	ret0, _ := ret[0].(sshuttle.CliInterface)
	return ret0
}

// SSHUttle indicates an expected call of SSHUttle
func (mr *MockCliInterfaceMockRecorder) SSHUttle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHUttle", reflect.TypeOf((*MockCliInterface)(nil).SSHUttle))
}

// SSH mocks base method
func (m *MockCliInterface) SSH() ssh.CliInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSH")
	ret0, _ := ret[0].(ssh.CliInterface)
	return ret0
}

// SSH indicates an expected call of SSH
func (mr *MockCliInterfaceMockRecorder) SSH() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSH", reflect.TypeOf((*MockCliInterface)(nil).SSH))
}
